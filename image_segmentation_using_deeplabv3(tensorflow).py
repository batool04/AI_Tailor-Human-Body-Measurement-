# -*- coding: utf-8 -*-
"""Image_Segmentation using_DeepLabv3(Tensorflow).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TDnxe1AO_roOMV1EDgzWZYC61u2GcBCN
"""

import tarfile
import tensorflow as tf
import urllib.request

_DOWNLOAD_URL_PREFIX = 'http://download.tensorflow.org/models/'
_MODEL_URLS = {
    'mobilenetv2_coco_voctrainaug': 'deeplabv3_mnv2_pascal_train_aug_2018_01_29.tar.gz',
    'mobilenetv2_coco_voctrainval': 'deeplabv3_mnv2_pascal_trainval_2018_01_29.tar.gz',
    'xception_coco_voctrainaug': 'deeplabv3_pascal_train_aug_2018_01_04.tar.gz',
    'xception_coco_voctrainval': 'deeplabv3_pascal_trainval_2018_01_04.tar.gz'
}

def download_and_extract_model(model_name):
    model_url = _DOWNLOAD_URL_PREFIX + _MODEL_URLS[model_name]
    tar_file = model_name + '.tar.gz'
    urllib.request.urlretrieve(model_url, tar_file)
    tar = tarfile.open(tar_file, "r:gz")
    tar.extractall()
    tar.close()

# Example: Download MobileNetV2 trained on VOC train-augmented set
download_and_extract_model('mobilenetv2_coco_voctrainaug')

def load_graph(frozen_graph_filename):
    with tf.io.gfile.GFile(frozen_graph_filename, "rb") as f:
        graph_def = tf.compat.v1.GraphDef()
        graph_def.ParseFromString(f.read())

    with tf.Graph().as_default() as graph:
        tf.import_graph_def(graph_def, name='')
    return graph

# Load the frozen graph
graph = load_graph('deeplabv3_mnv2_pascal_train_aug/frozen_inference_graph.pb')

import cv2
import numpy as np

def load_preprocess_image(image_path):
    image = cv2.imread(image_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    image = cv2.resize(image, (513, 513))
    return image

def run_segmentation(image_path, graph):
    image = load_preprocess_image(image_path)

    with tf.compat.v1.Session(graph=graph) as sess:
        input_tensor = graph.get_tensor_by_name('ImageTensor:0')
        output_tensor = graph.get_tensor_by_name('SemanticPredictions:0')
        predictions = sess.run(output_tensor, feed_dict={input_tensor: [image]})
        return predictions[0]

# Example usage
image_path = '/content/arsalan2.jpeg'
segmentation_result = run_segmentation(image_path, graph)

import matplotlib.pyplot as plt

def visualize_segmentation(segmentation_result):
    plt.figure(figsize=(8, 8))
    plt.imshow(segmentation_result)
    plt.axis('off')
    plt.show()

visualize_segmentation(segmentation_result)